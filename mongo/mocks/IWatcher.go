// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bson "go.mongodb.org/mongo-driver/bson"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"
)

// IWatcher is an autogenerated mock type for the IWatcher type
type IWatcher struct {
	mock.Mock
}

type IWatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *IWatcher) EXPECT() *IWatcher_Expecter {
	return &IWatcher_Expecter{mock: &_m.Mock}
}

// watch provides a mock function with given fields: ctx, collection, handler
func (_m *IWatcher) watch(ctx context.Context, collection *mongo.Collection, handler func(bson.Raw, string)) {
	_m.Called(ctx, collection, handler)
}

// IWatcher_watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'watch'
type IWatcher_watch_Call struct {
	*mock.Call
}

// watch is a helper method to define mock.On call
//   - ctx context.Context
//   - collection *mongo.Collection
//   - handler func(bson.Raw , string)
func (_e *IWatcher_Expecter) watch(ctx interface{}, collection interface{}, handler interface{}) *IWatcher_watch_Call {
	return &IWatcher_watch_Call{Call: _e.mock.On("watch", ctx, collection, handler)}
}

func (_c *IWatcher_watch_Call) Run(run func(ctx context.Context, collection *mongo.Collection, handler func(bson.Raw, string))) *IWatcher_watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*mongo.Collection), args[2].(func(bson.Raw, string)))
	})
	return _c
}

func (_c *IWatcher_watch_Call) Return() *IWatcher_watch_Call {
	_c.Call.Return()
	return _c
}

func (_c *IWatcher_watch_Call) RunAndReturn(run func(context.Context, *mongo.Collection, func(bson.Raw, string))) *IWatcher_watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewIWatcher creates a new instance of IWatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *IWatcher {
	mock := &IWatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
