// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ILocalCacheRepository is an autogenerated mock type for the ILocalCacheRepository type
type ILocalCacheRepository struct {
	mock.Mock
}

type ILocalCacheRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ILocalCacheRepository) EXPECT() *ILocalCacheRepository_Expecter {
	return &ILocalCacheRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: key
func (_m *ILocalCacheRepository) Delete(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ILocalCacheRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ILocalCacheRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *ILocalCacheRepository_Expecter) Delete(key interface{}) *ILocalCacheRepository_Delete_Call {
	return &ILocalCacheRepository_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *ILocalCacheRepository_Delete_Call) Run(run func(key string)) *ILocalCacheRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ILocalCacheRepository_Delete_Call) Return(_a0 error) *ILocalCacheRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILocalCacheRepository_Delete_Call) RunAndReturn(run func(string) error) *ILocalCacheRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *ILocalCacheRepository) Get(key string) ([]byte, error) {
	ret := _m.Called(key)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ILocalCacheRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ILocalCacheRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *ILocalCacheRepository_Expecter) Get(key interface{}) *ILocalCacheRepository_Get_Call {
	return &ILocalCacheRepository_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *ILocalCacheRepository_Get_Call) Run(run func(key string)) *ILocalCacheRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ILocalCacheRepository_Get_Call) Return(_a0 []byte, _a1 error) *ILocalCacheRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ILocalCacheRepository_Get_Call) RunAndReturn(run func(string) ([]byte, error)) *ILocalCacheRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *ILocalCacheRepository) Reset() {
	_m.Called()
}

// ILocalCacheRepository_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type ILocalCacheRepository_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *ILocalCacheRepository_Expecter) Reset() *ILocalCacheRepository_Reset_Call {
	return &ILocalCacheRepository_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *ILocalCacheRepository_Reset_Call) Run(run func()) *ILocalCacheRepository_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ILocalCacheRepository_Reset_Call) Return() *ILocalCacheRepository_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *ILocalCacheRepository_Reset_Call) RunAndReturn(run func()) *ILocalCacheRepository_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *ILocalCacheRepository) Set(key string, value []byte) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ILocalCacheRepository_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type ILocalCacheRepository_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value []byte
func (_e *ILocalCacheRepository_Expecter) Set(key interface{}, value interface{}) *ILocalCacheRepository_Set_Call {
	return &ILocalCacheRepository_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *ILocalCacheRepository_Set_Call) Run(run func(key string, value []byte)) *ILocalCacheRepository_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *ILocalCacheRepository_Set_Call) Return(_a0 error) *ILocalCacheRepository_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ILocalCacheRepository_Set_Call) RunAndReturn(run func(string, []byte) error) *ILocalCacheRepository_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewILocalCacheRepository creates a new instance of ILocalCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewILocalCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ILocalCacheRepository {
	mock := &ILocalCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
