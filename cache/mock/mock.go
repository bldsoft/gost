// Code generated by MockGen. DO NOT EDIT.
// Source: cache/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockILocalCacheRepository is a mock of ILocalCacheRepository interface.
type MockILocalCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockILocalCacheRepositoryMockRecorder
}

// MockILocalCacheRepositoryMockRecorder is the mock recorder for MockILocalCacheRepository.
type MockILocalCacheRepositoryMockRecorder struct {
	mock *MockILocalCacheRepository
}

// NewMockILocalCacheRepository creates a new mock instance.
func NewMockILocalCacheRepository(ctrl *gomock.Controller) *MockILocalCacheRepository {
	mock := &MockILocalCacheRepository{ctrl: ctrl}
	mock.recorder = &MockILocalCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILocalCacheRepository) EXPECT() *MockILocalCacheRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockILocalCacheRepository) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockILocalCacheRepositoryMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockILocalCacheRepository)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockILocalCacheRepository) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockILocalCacheRepositoryMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockILocalCacheRepository)(nil).Get), key)
}

// Reset mocks base method.
func (m *MockILocalCacheRepository) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockILocalCacheRepositoryMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockILocalCacheRepository)(nil).Reset))
}

// Set mocks base method.
func (m *MockILocalCacheRepository) Set(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockILocalCacheRepositoryMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockILocalCacheRepository)(nil).Set), key, value)
}

// MockIExpiringCacheRepository is a mock of IExpiringCacheRepository interface.
type MockIExpiringCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIExpiringCacheRepositoryMockRecorder
}

// MockIExpiringCacheRepositoryMockRecorder is the mock recorder for MockIExpiringCacheRepository.
type MockIExpiringCacheRepositoryMockRecorder struct {
	mock *MockIExpiringCacheRepository
}

// NewMockIExpiringCacheRepository creates a new mock instance.
func NewMockIExpiringCacheRepository(ctrl *gomock.Controller) *MockIExpiringCacheRepository {
	mock := &MockIExpiringCacheRepository{ctrl: ctrl}
	mock.recorder = &MockIExpiringCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExpiringCacheRepository) EXPECT() *MockIExpiringCacheRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIExpiringCacheRepository) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIExpiringCacheRepositoryMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIExpiringCacheRepository)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockIExpiringCacheRepository) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIExpiringCacheRepositoryMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIExpiringCacheRepository)(nil).Get), key)
}

// Reset mocks base method.
func (m *MockIExpiringCacheRepository) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockIExpiringCacheRepositoryMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockIExpiringCacheRepository)(nil).Reset))
}

// Set mocks base method.
func (m *MockIExpiringCacheRepository) Set(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIExpiringCacheRepositoryMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIExpiringCacheRepository)(nil).Set), key, value)
}

// SetFor mocks base method.
func (m *MockIExpiringCacheRepository) SetFor(key string, value []byte, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFor", key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFor indicates an expected call of SetFor.
func (mr *MockIExpiringCacheRepositoryMockRecorder) SetFor(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFor", reflect.TypeOf((*MockIExpiringCacheRepository)(nil).SetFor), key, value, ttl)
}

// MockIDistrCacheRepository is a mock of IDistrCacheRepository interface.
type MockIDistrCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIDistrCacheRepositoryMockRecorder
}

// MockIDistrCacheRepositoryMockRecorder is the mock recorder for MockIDistrCacheRepository.
type MockIDistrCacheRepositoryMockRecorder struct {
	mock *MockIDistrCacheRepository
}

// NewMockIDistrCacheRepository creates a new mock instance.
func NewMockIDistrCacheRepository(ctrl *gomock.Controller) *MockIDistrCacheRepository {
	mock := &MockIDistrCacheRepository{ctrl: ctrl}
	mock.recorder = &MockIDistrCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDistrCacheRepository) EXPECT() *MockIDistrCacheRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIDistrCacheRepository) Add(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockIDistrCacheRepositoryMockRecorder) Add(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIDistrCacheRepository)(nil).Add), key, value)
}

// AddFor mocks base method.
func (m *MockIDistrCacheRepository) AddFor(key string, value []byte, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFor", key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFor indicates an expected call of AddFor.
func (mr *MockIDistrCacheRepositoryMockRecorder) AddFor(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFor", reflect.TypeOf((*MockIDistrCacheRepository)(nil).AddFor), key, value, ttl)
}

// CompareAndSwap mocks base method.
func (m *MockIDistrCacheRepository) CompareAndSwap(key string, handler func([]byte) ([]byte, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareAndSwap", key, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareAndSwap indicates an expected call of CompareAndSwap.
func (mr *MockIDistrCacheRepositoryMockRecorder) CompareAndSwap(key, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareAndSwap", reflect.TypeOf((*MockIDistrCacheRepository)(nil).CompareAndSwap), key, handler)
}

// Delete mocks base method.
func (m *MockIDistrCacheRepository) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIDistrCacheRepositoryMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIDistrCacheRepository)(nil).Delete), key)
}

// Exist mocks base method.
func (m *MockIDistrCacheRepository) Exist(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exist indicates an expected call of Exist.
func (mr *MockIDistrCacheRepositoryMockRecorder) Exist(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockIDistrCacheRepository)(nil).Exist), key)
}

// Get mocks base method.
func (m *MockIDistrCacheRepository) Get(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIDistrCacheRepositoryMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIDistrCacheRepository)(nil).Get), key)
}

// GetWithFlags mocks base method.
func (m *MockIDistrCacheRepository) GetWithFlags(key string) ([]byte, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithFlags", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithFlags indicates an expected call of GetWithFlags.
func (mr *MockIDistrCacheRepositoryMockRecorder) GetWithFlags(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithFlags", reflect.TypeOf((*MockIDistrCacheRepository)(nil).GetWithFlags), key)
}

// Reset mocks base method.
func (m *MockIDistrCacheRepository) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockIDistrCacheRepositoryMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockIDistrCacheRepository)(nil).Reset))
}

// Set mocks base method.
func (m *MockIDistrCacheRepository) Set(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIDistrCacheRepositoryMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIDistrCacheRepository)(nil).Set), key, value)
}

// SetFor mocks base method.
func (m *MockIDistrCacheRepository) SetFor(key string, value []byte, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFor", key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFor indicates an expected call of SetFor.
func (mr *MockIDistrCacheRepositoryMockRecorder) SetFor(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFor", reflect.TypeOf((*MockIDistrCacheRepository)(nil).SetFor), key, value, ttl)
}

// SetForWithFlags mocks base method.
func (m *MockIDistrCacheRepository) SetForWithFlags(key string, value []byte, flags uint32, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetForWithFlags", key, value, flags, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetForWithFlags indicates an expected call of SetForWithFlags.
func (mr *MockIDistrCacheRepositoryMockRecorder) SetForWithFlags(key, value, flags, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetForWithFlags", reflect.TypeOf((*MockIDistrCacheRepository)(nil).SetForWithFlags), key, value, flags, ttl)
}

// SetWithFlags mocks base method.
func (m *MockIDistrCacheRepository) SetWithFlags(key string, value []byte, flags uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWithFlags", key, value, flags)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWithFlags indicates an expected call of SetWithFlags.
func (mr *MockIDistrCacheRepositoryMockRecorder) SetWithFlags(key, value, flags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWithFlags", reflect.TypeOf((*MockIDistrCacheRepository)(nil).SetWithFlags), key, value, flags)
}

// MockRepository is a mock of Repository interface.
type MockRepository[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder[T]
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder[T any] struct {
	mock *MockRepository[T]
}

// NewMockRepository creates a new mock instance.
func NewMockRepository[T any](ctrl *gomock.Controller) *MockRepository[T] {
	mock := &MockRepository[T]{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository[T]) EXPECT() *MockRepositoryMockRecorder[T] {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRepository[T]) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder[T]) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository[T])(nil).Delete), key)
}

// Get mocks base method.
func (m *MockRepository[T]) Get(key string) (T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder[T]) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository[T])(nil).Get), key)
}

// Reset mocks base method.
func (m *MockRepository[T]) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockRepositoryMockRecorder[T]) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockRepository[T])(nil).Reset))
}

// Set mocks base method.
func (m *MockRepository[T]) Set(key string, value T) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRepositoryMockRecorder[T]) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRepository[T])(nil).Set), key, value)
}

// SetFor mocks base method.
func (m *MockRepository[T]) SetFor(key string, value T, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFor", key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFor indicates an expected call of SetFor.
func (mr *MockRepositoryMockRecorder[T]) SetFor(key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFor", reflect.TypeOf((*MockRepository[T])(nil).SetFor), key, value, ttl)
}
