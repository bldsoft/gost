// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// IDistrCacheRepository is an autogenerated mock type for the IDistrCacheRepository type
type IDistrCacheRepository struct {
	mock.Mock
}

type IDistrCacheRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IDistrCacheRepository) EXPECT() *IDistrCacheRepository_Expecter {
	return &IDistrCacheRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: key, value
func (_m *IDistrCacheRepository) Add(key string, value []byte) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDistrCacheRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type IDistrCacheRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - key string
//   - value []byte
func (_e *IDistrCacheRepository_Expecter) Add(key interface{}, value interface{}) *IDistrCacheRepository_Add_Call {
	return &IDistrCacheRepository_Add_Call{Call: _e.mock.On("Add", key, value)}
}

func (_c *IDistrCacheRepository_Add_Call) Run(run func(key string, value []byte)) *IDistrCacheRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *IDistrCacheRepository_Add_Call) Return(_a0 error) *IDistrCacheRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDistrCacheRepository_Add_Call) RunAndReturn(run func(string, []byte) error) *IDistrCacheRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// AddFor provides a mock function with given fields: key, value, ttl
func (_m *IDistrCacheRepository) AddFor(key string, value []byte, ttl time.Duration) error {
	ret := _m.Called(key, value, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, time.Duration) error); ok {
		r0 = rf(key, value, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDistrCacheRepository_AddFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFor'
type IDistrCacheRepository_AddFor_Call struct {
	*mock.Call
}

// AddFor is a helper method to define mock.On call
//   - key string
//   - value []byte
//   - ttl time.Duration
func (_e *IDistrCacheRepository_Expecter) AddFor(key interface{}, value interface{}, ttl interface{}) *IDistrCacheRepository_AddFor_Call {
	return &IDistrCacheRepository_AddFor_Call{Call: _e.mock.On("AddFor", key, value, ttl)}
}

func (_c *IDistrCacheRepository_AddFor_Call) Run(run func(key string, value []byte, ttl time.Duration)) *IDistrCacheRepository_AddFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(time.Duration))
	})
	return _c
}

func (_c *IDistrCacheRepository_AddFor_Call) Return(_a0 error) *IDistrCacheRepository_AddFor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDistrCacheRepository_AddFor_Call) RunAndReturn(run func(string, []byte, time.Duration) error) *IDistrCacheRepository_AddFor_Call {
	_c.Call.Return(run)
	return _c
}

// CompareAndSwap provides a mock function with given fields: key, handler
func (_m *IDistrCacheRepository) CompareAndSwap(key string, handler func([]byte) ([]byte, error)) error {
	ret := _m.Called(key, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func([]byte) ([]byte, error)) error); ok {
		r0 = rf(key, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDistrCacheRepository_CompareAndSwap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompareAndSwap'
type IDistrCacheRepository_CompareAndSwap_Call struct {
	*mock.Call
}

// CompareAndSwap is a helper method to define mock.On call
//   - key string
//   - handler func([]byte)([]byte , error)
func (_e *IDistrCacheRepository_Expecter) CompareAndSwap(key interface{}, handler interface{}) *IDistrCacheRepository_CompareAndSwap_Call {
	return &IDistrCacheRepository_CompareAndSwap_Call{Call: _e.mock.On("CompareAndSwap", key, handler)}
}

func (_c *IDistrCacheRepository_CompareAndSwap_Call) Run(run func(key string, handler func([]byte) ([]byte, error))) *IDistrCacheRepository_CompareAndSwap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(func([]byte) ([]byte, error)))
	})
	return _c
}

func (_c *IDistrCacheRepository_CompareAndSwap_Call) Return(_a0 error) *IDistrCacheRepository_CompareAndSwap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDistrCacheRepository_CompareAndSwap_Call) RunAndReturn(run func(string, func([]byte) ([]byte, error)) error) *IDistrCacheRepository_CompareAndSwap_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: key
func (_m *IDistrCacheRepository) Delete(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDistrCacheRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IDistrCacheRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key string
func (_e *IDistrCacheRepository_Expecter) Delete(key interface{}) *IDistrCacheRepository_Delete_Call {
	return &IDistrCacheRepository_Delete_Call{Call: _e.mock.On("Delete", key)}
}

func (_c *IDistrCacheRepository_Delete_Call) Run(run func(key string)) *IDistrCacheRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IDistrCacheRepository_Delete_Call) Return(_a0 error) *IDistrCacheRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDistrCacheRepository_Delete_Call) RunAndReturn(run func(string) error) *IDistrCacheRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Exist provides a mock function with given fields: key
func (_m *IDistrCacheRepository) Exist(key string) bool {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IDistrCacheRepository_Exist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exist'
type IDistrCacheRepository_Exist_Call struct {
	*mock.Call
}

// Exist is a helper method to define mock.On call
//   - key string
func (_e *IDistrCacheRepository_Expecter) Exist(key interface{}) *IDistrCacheRepository_Exist_Call {
	return &IDistrCacheRepository_Exist_Call{Call: _e.mock.On("Exist", key)}
}

func (_c *IDistrCacheRepository_Exist_Call) Run(run func(key string)) *IDistrCacheRepository_Exist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IDistrCacheRepository_Exist_Call) Return(_a0 bool) *IDistrCacheRepository_Exist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDistrCacheRepository_Exist_Call) RunAndReturn(run func(string) bool) *IDistrCacheRepository_Exist_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *IDistrCacheRepository) Get(key string) ([]byte, error) {
	ret := _m.Called(key)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IDistrCacheRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type IDistrCacheRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *IDistrCacheRepository_Expecter) Get(key interface{}) *IDistrCacheRepository_Get_Call {
	return &IDistrCacheRepository_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *IDistrCacheRepository_Get_Call) Run(run func(key string)) *IDistrCacheRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IDistrCacheRepository_Get_Call) Return(_a0 []byte, _a1 error) *IDistrCacheRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IDistrCacheRepository_Get_Call) RunAndReturn(run func(string) ([]byte, error)) *IDistrCacheRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithFlags provides a mock function with given fields: key
func (_m *IDistrCacheRepository) GetWithFlags(key string) ([]byte, uint32, error) {
	ret := _m.Called(key)

	var r0 []byte
	var r1 uint32
	var r2 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, uint32, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) uint32); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(uint32)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IDistrCacheRepository_GetWithFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithFlags'
type IDistrCacheRepository_GetWithFlags_Call struct {
	*mock.Call
}

// GetWithFlags is a helper method to define mock.On call
//   - key string
func (_e *IDistrCacheRepository_Expecter) GetWithFlags(key interface{}) *IDistrCacheRepository_GetWithFlags_Call {
	return &IDistrCacheRepository_GetWithFlags_Call{Call: _e.mock.On("GetWithFlags", key)}
}

func (_c *IDistrCacheRepository_GetWithFlags_Call) Run(run func(key string)) *IDistrCacheRepository_GetWithFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IDistrCacheRepository_GetWithFlags_Call) Return(data []byte, flags uint32, err error) *IDistrCacheRepository_GetWithFlags_Call {
	_c.Call.Return(data, flags, err)
	return _c
}

func (_c *IDistrCacheRepository_GetWithFlags_Call) RunAndReturn(run func(string) ([]byte, uint32, error)) *IDistrCacheRepository_GetWithFlags_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields:
func (_m *IDistrCacheRepository) Reset() {
	_m.Called()
}

// IDistrCacheRepository_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type IDistrCacheRepository_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *IDistrCacheRepository_Expecter) Reset() *IDistrCacheRepository_Reset_Call {
	return &IDistrCacheRepository_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *IDistrCacheRepository_Reset_Call) Run(run func()) *IDistrCacheRepository_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IDistrCacheRepository_Reset_Call) Return() *IDistrCacheRepository_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *IDistrCacheRepository_Reset_Call) RunAndReturn(run func()) *IDistrCacheRepository_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, value
func (_m *IDistrCacheRepository) Set(key string, value []byte) error {
	ret := _m.Called(key, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDistrCacheRepository_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type IDistrCacheRepository_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - value []byte
func (_e *IDistrCacheRepository_Expecter) Set(key interface{}, value interface{}) *IDistrCacheRepository_Set_Call {
	return &IDistrCacheRepository_Set_Call{Call: _e.mock.On("Set", key, value)}
}

func (_c *IDistrCacheRepository_Set_Call) Run(run func(key string, value []byte)) *IDistrCacheRepository_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *IDistrCacheRepository_Set_Call) Return(_a0 error) *IDistrCacheRepository_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDistrCacheRepository_Set_Call) RunAndReturn(run func(string, []byte) error) *IDistrCacheRepository_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetFor provides a mock function with given fields: key, value, ttl
func (_m *IDistrCacheRepository) SetFor(key string, value []byte, ttl time.Duration) error {
	ret := _m.Called(key, value, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, time.Duration) error); ok {
		r0 = rf(key, value, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDistrCacheRepository_SetFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFor'
type IDistrCacheRepository_SetFor_Call struct {
	*mock.Call
}

// SetFor is a helper method to define mock.On call
//   - key string
//   - value []byte
//   - ttl time.Duration
func (_e *IDistrCacheRepository_Expecter) SetFor(key interface{}, value interface{}, ttl interface{}) *IDistrCacheRepository_SetFor_Call {
	return &IDistrCacheRepository_SetFor_Call{Call: _e.mock.On("SetFor", key, value, ttl)}
}

func (_c *IDistrCacheRepository_SetFor_Call) Run(run func(key string, value []byte, ttl time.Duration)) *IDistrCacheRepository_SetFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(time.Duration))
	})
	return _c
}

func (_c *IDistrCacheRepository_SetFor_Call) Return(_a0 error) *IDistrCacheRepository_SetFor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDistrCacheRepository_SetFor_Call) RunAndReturn(run func(string, []byte, time.Duration) error) *IDistrCacheRepository_SetFor_Call {
	_c.Call.Return(run)
	return _c
}

// SetForWithFlags provides a mock function with given fields: key, value, flags, ttl
func (_m *IDistrCacheRepository) SetForWithFlags(key string, value []byte, flags uint32, ttl time.Duration) error {
	ret := _m.Called(key, value, flags, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, uint32, time.Duration) error); ok {
		r0 = rf(key, value, flags, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDistrCacheRepository_SetForWithFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetForWithFlags'
type IDistrCacheRepository_SetForWithFlags_Call struct {
	*mock.Call
}

// SetForWithFlags is a helper method to define mock.On call
//   - key string
//   - value []byte
//   - flags uint32
//   - ttl time.Duration
func (_e *IDistrCacheRepository_Expecter) SetForWithFlags(key interface{}, value interface{}, flags interface{}, ttl interface{}) *IDistrCacheRepository_SetForWithFlags_Call {
	return &IDistrCacheRepository_SetForWithFlags_Call{Call: _e.mock.On("SetForWithFlags", key, value, flags, ttl)}
}

func (_c *IDistrCacheRepository_SetForWithFlags_Call) Run(run func(key string, value []byte, flags uint32, ttl time.Duration)) *IDistrCacheRepository_SetForWithFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(uint32), args[3].(time.Duration))
	})
	return _c
}

func (_c *IDistrCacheRepository_SetForWithFlags_Call) Return(_a0 error) *IDistrCacheRepository_SetForWithFlags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDistrCacheRepository_SetForWithFlags_Call) RunAndReturn(run func(string, []byte, uint32, time.Duration) error) *IDistrCacheRepository_SetForWithFlags_Call {
	_c.Call.Return(run)
	return _c
}

// SetWithFlags provides a mock function with given fields: key, value, flags
func (_m *IDistrCacheRepository) SetWithFlags(key string, value []byte, flags uint32) error {
	ret := _m.Called(key, value, flags)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte, uint32) error); ok {
		r0 = rf(key, value, flags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDistrCacheRepository_SetWithFlags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetWithFlags'
type IDistrCacheRepository_SetWithFlags_Call struct {
	*mock.Call
}

// SetWithFlags is a helper method to define mock.On call
//   - key string
//   - value []byte
//   - flags uint32
func (_e *IDistrCacheRepository_Expecter) SetWithFlags(key interface{}, value interface{}, flags interface{}) *IDistrCacheRepository_SetWithFlags_Call {
	return &IDistrCacheRepository_SetWithFlags_Call{Call: _e.mock.On("SetWithFlags", key, value, flags)}
}

func (_c *IDistrCacheRepository_SetWithFlags_Call) Run(run func(key string, value []byte, flags uint32)) *IDistrCacheRepository_SetWithFlags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte), args[2].(uint32))
	})
	return _c
}

func (_c *IDistrCacheRepository_SetWithFlags_Call) Return(_a0 error) *IDistrCacheRepository_SetWithFlags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IDistrCacheRepository_SetWithFlags_Call) RunAndReturn(run func(string, []byte, uint32) error) *IDistrCacheRepository_SetWithFlags_Call {
	_c.Call.Return(run)
	return _c
}

// NewIDistrCacheRepository creates a new instance of IDistrCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIDistrCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IDistrCacheRepository {
	mock := &IDistrCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
