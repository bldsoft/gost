// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package discovery

import (
	"fmt"
	"strings"
)

const (
	// ServiceEventTypeDiscovered is a ServiceEventType of type Discovered.
	ServiceEventTypeDiscovered ServiceEventType = iota
	// ServiceEventTypeUp is a ServiceEventType of type Up.
	ServiceEventTypeUp
	// ServiceEventTypeDown is a ServiceEventType of type Down.
	ServiceEventTypeDown
	// ServiceEventTypeRemoved is a ServiceEventType of type Removed.
	ServiceEventTypeRemoved
	// ServiceEventTypeCount is a ServiceEventType of type Count.
	ServiceEventTypeCount
)

var ErrInvalidServiceEventType = fmt.Errorf("not a valid ServiceEventType, try [%s]", strings.Join(_ServiceEventTypeNames, ", "))

const _ServiceEventTypeName = "discoveredupdownremovedcount"

var _ServiceEventTypeNames = []string{
	_ServiceEventTypeName[0:10],
	_ServiceEventTypeName[10:12],
	_ServiceEventTypeName[12:16],
	_ServiceEventTypeName[16:23],
	_ServiceEventTypeName[23:28],
}

// ServiceEventTypeNames returns a list of possible string values of ServiceEventType.
func ServiceEventTypeNames() []string {
	tmp := make([]string, len(_ServiceEventTypeNames))
	copy(tmp, _ServiceEventTypeNames)
	return tmp
}

var _ServiceEventTypeMap = map[ServiceEventType]string{
	ServiceEventTypeDiscovered: _ServiceEventTypeName[0:10],
	ServiceEventTypeUp:         _ServiceEventTypeName[10:12],
	ServiceEventTypeDown:       _ServiceEventTypeName[12:16],
	ServiceEventTypeRemoved:    _ServiceEventTypeName[16:23],
	ServiceEventTypeCount:      _ServiceEventTypeName[23:28],
}

// String implements the Stringer interface.
func (x ServiceEventType) String() string {
	if str, ok := _ServiceEventTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("ServiceEventType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ServiceEventType) IsValid() bool {
	_, ok := _ServiceEventTypeMap[x]
	return ok
}

var _ServiceEventTypeValue = map[string]ServiceEventType{
	_ServiceEventTypeName[0:10]:  ServiceEventTypeDiscovered,
	_ServiceEventTypeName[10:12]: ServiceEventTypeUp,
	_ServiceEventTypeName[12:16]: ServiceEventTypeDown,
	_ServiceEventTypeName[16:23]: ServiceEventTypeRemoved,
	_ServiceEventTypeName[23:28]: ServiceEventTypeCount,
}

// ParseServiceEventType attempts to convert a string to a ServiceEventType.
func ParseServiceEventType(name string) (ServiceEventType, error) {
	if x, ok := _ServiceEventTypeValue[name]; ok {
		return x, nil
	}
	return ServiceEventType(0), fmt.Errorf("%s is %w", name, ErrInvalidServiceEventType)
}
