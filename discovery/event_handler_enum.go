// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package discovery

import (
	"fmt"
	"strings"
)

const (
	// EventTypeDiscovered is a EventType of type Discovered.
	EventTypeDiscovered EventType = iota
	// EventTypeUp is a EventType of type Up.
	EventTypeUp
	// EventTypeDown is a EventType of type Down.
	EventTypeDown
	// EventTypeRemoved is a EventType of type Removed.
	EventTypeRemoved
	// EventTypeCount is a EventType of type Count.
	EventTypeCount
)

var ErrInvalidEventType = fmt.Errorf("not a valid EventType, try [%s]", strings.Join(_EventTypeNames, ", "))

const _EventTypeName = "discoveredupdownremovedcount"

var _EventTypeNames = []string{
	_EventTypeName[0:10],
	_EventTypeName[10:12],
	_EventTypeName[12:16],
	_EventTypeName[16:23],
	_EventTypeName[23:28],
}

// EventTypeNames returns a list of possible string values of EventType.
func EventTypeNames() []string {
	tmp := make([]string, len(_EventTypeNames))
	copy(tmp, _EventTypeNames)
	return tmp
}

var _EventTypeMap = map[EventType]string{
	EventTypeDiscovered: _EventTypeName[0:10],
	EventTypeUp:         _EventTypeName[10:12],
	EventTypeDown:       _EventTypeName[12:16],
	EventTypeRemoved:    _EventTypeName[16:23],
	EventTypeCount:      _EventTypeName[23:28],
}

// String implements the Stringer interface.
func (x EventType) String() string {
	if str, ok := _EventTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("EventType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x EventType) IsValid() bool {
	_, ok := _EventTypeMap[x]
	return ok
}

var _EventTypeValue = map[string]EventType{
	_EventTypeName[0:10]:  EventTypeDiscovered,
	_EventTypeName[10:12]: EventTypeUp,
	_EventTypeName[12:16]: EventTypeDown,
	_EventTypeName[16:23]: EventTypeRemoved,
	_EventTypeName[23:28]: EventTypeCount,
}

// ParseEventType attempts to convert a string to a EventType.
func ParseEventType(name string) (EventType, error) {
	if x, ok := _EventTypeValue[name]; ok {
		return x, nil
	}
	return EventType(0), fmt.Errorf("%s is %w", name, ErrInvalidEventType)
}
