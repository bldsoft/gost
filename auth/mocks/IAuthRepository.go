// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/bldsoft/gost/repository"
	mock "github.com/stretchr/testify/mock"
)

// IAuthRepository is an autogenerated mock type for the IAuthRepository type
type IAuthRepository[PT interface{}] struct {
	mock.Mock
}

type IAuthRepository_Expecter[PT interface{}] struct {
	mock *mock.Mock
}

func (_m *IAuthRepository[PT]) EXPECT() *IAuthRepository_Expecter[PT] {
	return &IAuthRepository_Expecter[PT]{mock: &_m.Mock}
}

// FindByLogin provides a mock function with given fields: ctx, login, options
func (_m *IAuthRepository[PT]) FindByLogin(ctx context.Context, login string, options ...*repository.QueryOptions) (PT, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, login)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 PT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*repository.QueryOptions) (PT, error)); ok {
		return rf(ctx, login, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*repository.QueryOptions) PT); ok {
		r0 = rf(ctx, login, options...)
	} else {
		r0 = ret.Get(0).(PT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...*repository.QueryOptions) error); ok {
		r1 = rf(ctx, login, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuthRepository_FindByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByLogin'
type IAuthRepository_FindByLogin_Call[PT interface{}] struct {
	*mock.Call
}

// FindByLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - options ...*repository.QueryOptions
func (_e *IAuthRepository_Expecter[PT]) FindByLogin(ctx interface{}, login interface{}, options ...interface{}) *IAuthRepository_FindByLogin_Call[PT] {
	return &IAuthRepository_FindByLogin_Call[PT]{Call: _e.mock.On("FindByLogin",
		append([]interface{}{ctx, login}, options...)...)}
}

func (_c *IAuthRepository_FindByLogin_Call[PT]) Run(run func(ctx context.Context, login string, options ...*repository.QueryOptions)) *IAuthRepository_FindByLogin_Call[PT] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*repository.QueryOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*repository.QueryOptions)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *IAuthRepository_FindByLogin_Call[PT]) Return(_a0 PT, _a1 error) *IAuthRepository_FindByLogin_Call[PT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuthRepository_FindByLogin_Call[PT]) RunAndReturn(run func(context.Context, string, ...*repository.QueryOptions) (PT, error)) *IAuthRepository_FindByLogin_Call[PT] {
	_c.Call.Return(run)
	return _c
}

// NewIAuthRepository creates a new instance of IAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthRepository[PT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthRepository[PT] {
	mock := &IAuthRepository[PT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
