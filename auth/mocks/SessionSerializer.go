// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	sessions "github.com/gorilla/sessions"
	mock "github.com/stretchr/testify/mock"
)

// SessionSerializer is an autogenerated mock type for the SessionSerializer type
type SessionSerializer struct {
	mock.Mock
}

type SessionSerializer_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionSerializer) EXPECT() *SessionSerializer_Expecter {
	return &SessionSerializer_Expecter{mock: &_m.Mock}
}

// Deserialize provides a mock function with given fields: b, s
func (_m *SessionSerializer) Deserialize(b []byte, s *sessions.Session) error {
	ret := _m.Called(b, s)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, *sessions.Session) error); ok {
		r0 = rf(b, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionSerializer_Deserialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deserialize'
type SessionSerializer_Deserialize_Call struct {
	*mock.Call
}

// Deserialize is a helper method to define mock.On call
//   - b []byte
//   - s *sessions.Session
func (_e *SessionSerializer_Expecter) Deserialize(b interface{}, s interface{}) *SessionSerializer_Deserialize_Call {
	return &SessionSerializer_Deserialize_Call{Call: _e.mock.On("Deserialize", b, s)}
}

func (_c *SessionSerializer_Deserialize_Call) Run(run func(b []byte, s *sessions.Session)) *SessionSerializer_Deserialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(*sessions.Session))
	})
	return _c
}

func (_c *SessionSerializer_Deserialize_Call) Return(_a0 error) *SessionSerializer_Deserialize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionSerializer_Deserialize_Call) RunAndReturn(run func([]byte, *sessions.Session) error) *SessionSerializer_Deserialize_Call {
	_c.Call.Return(run)
	return _c
}

// Serialize provides a mock function with given fields: s
func (_m *SessionSerializer) Serialize(s *sessions.Session) ([]byte, error) {
	ret := _m.Called(s)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*sessions.Session) ([]byte, error)); ok {
		return rf(s)
	}
	if rf, ok := ret.Get(0).(func(*sessions.Session) []byte); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*sessions.Session) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionSerializer_Serialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Serialize'
type SessionSerializer_Serialize_Call struct {
	*mock.Call
}

// Serialize is a helper method to define mock.On call
//   - s *sessions.Session
func (_e *SessionSerializer_Expecter) Serialize(s interface{}) *SessionSerializer_Serialize_Call {
	return &SessionSerializer_Serialize_Call{Call: _e.mock.On("Serialize", s)}
}

func (_c *SessionSerializer_Serialize_Call) Run(run func(s *sessions.Session)) *SessionSerializer_Serialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sessions.Session))
	})
	return _c
}

func (_c *SessionSerializer_Serialize_Call) Return(_a0 []byte, _a1 error) *SessionSerializer_Serialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionSerializer_Serialize_Call) RunAndReturn(run func(*sessions.Session) ([]byte, error)) *SessionSerializer_Serialize_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionSerializer creates a new instance of SessionSerializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionSerializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionSerializer {
	mock := &SessionSerializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
