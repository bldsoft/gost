// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/bldsoft/gost/auth"

	mock "github.com/stretchr/testify/mock"
)

// IAuthService is an autogenerated mock type for the IAuthService type
type IAuthService[PT auth.AuthenticablePtr[T], T interface{}] struct {
	mock.Mock
}

type IAuthService_Expecter[PT auth.AuthenticablePtr[T], T interface{}] struct {
	mock *mock.Mock
}

func (_m *IAuthService[PT, T]) EXPECT() *IAuthService_Expecter[PT, T] {
	return &IAuthService_Expecter[PT, T]{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *IAuthService[PT, T]) Login(ctx context.Context, username string, password string) (PT, error) {
	ret := _m.Called(ctx, username, password)

	var r0 PT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (PT, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) PT); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(PT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type IAuthService_Login_Call[PT auth.AuthenticablePtr[T], T interface{}] struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *IAuthService_Expecter[PT, T]) Login(ctx interface{}, username interface{}, password interface{}) *IAuthService_Login_Call[PT, T] {
	return &IAuthService_Login_Call[PT, T]{Call: _e.mock.On("Login", ctx, username, password)}
}

func (_c *IAuthService_Login_Call[PT, T]) Run(run func(ctx context.Context, username string, password string)) *IAuthService_Login_Call[PT, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *IAuthService_Login_Call[PT, T]) Return(_a0 PT, _a1 error) *IAuthService_Login_Call[PT, T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuthService_Login_Call[PT, T]) RunAndReturn(run func(context.Context, string, string) (PT, error)) *IAuthService_Login_Call[PT, T] {
	_c.Call.Return(run)
	return _c
}

// NewIAuthService creates a new instance of IAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthService[PT auth.AuthenticablePtr[T], T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthService[PT, T] {
	mock := &IAuthService[PT, T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
