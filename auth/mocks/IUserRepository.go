// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/bldsoft/gost/repository"
	mock "github.com/stretchr/testify/mock"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository[PT interface{}] struct {
	mock.Mock
}

type IUserRepository_Expecter[PT interface{}] struct {
	mock *mock.Mock
}

func (_m *IUserRepository[PT]) EXPECT() *IUserRepository_Expecter[PT] {
	return &IUserRepository_Expecter[PT]{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id, options
func (_m *IUserRepository[PT]) Delete(ctx context.Context, id interface{}, options ...*repository.QueryOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*repository.QueryOptions) error); ok {
		r0 = rf(ctx, id, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IUserRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IUserRepository_Delete_Call[PT interface{}] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id interface{}
//   - options ...*repository.QueryOptions
func (_e *IUserRepository_Expecter[PT]) Delete(ctx interface{}, id interface{}, options ...interface{}) *IUserRepository_Delete_Call[PT] {
	return &IUserRepository_Delete_Call[PT]{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, id}, options...)...)}
}

func (_c *IUserRepository_Delete_Call[PT]) Run(run func(ctx context.Context, id interface{}, options ...*repository.QueryOptions)) *IUserRepository_Delete_Call[PT] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*repository.QueryOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*repository.QueryOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *IUserRepository_Delete_Call[PT]) Return(_a0 error) *IUserRepository_Delete_Call[PT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserRepository_Delete_Call[PT]) RunAndReturn(run func(context.Context, interface{}, ...*repository.QueryOptions) error) *IUserRepository_Delete_Call[PT] {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id, options
func (_m *IUserRepository[PT]) FindByID(ctx context.Context, id interface{}, options ...*repository.QueryOptions) (PT, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 PT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*repository.QueryOptions) (PT, error)); ok {
		return rf(ctx, id, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*repository.QueryOptions) PT); ok {
		r0 = rf(ctx, id, options...)
	} else {
		r0 = ret.Get(0).(PT)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*repository.QueryOptions) error); ok {
		r1 = rf(ctx, id, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type IUserRepository_FindByID_Call[PT interface{}] struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id interface{}
//   - options ...*repository.QueryOptions
func (_e *IUserRepository_Expecter[PT]) FindByID(ctx interface{}, id interface{}, options ...interface{}) *IUserRepository_FindByID_Call[PT] {
	return &IUserRepository_FindByID_Call[PT]{Call: _e.mock.On("FindByID",
		append([]interface{}{ctx, id}, options...)...)}
}

func (_c *IUserRepository_FindByID_Call[PT]) Run(run func(ctx context.Context, id interface{}, options ...*repository.QueryOptions)) *IUserRepository_FindByID_Call[PT] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*repository.QueryOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*repository.QueryOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *IUserRepository_FindByID_Call[PT]) Return(_a0 PT, _a1 error) *IUserRepository_FindByID_Call[PT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserRepository_FindByID_Call[PT]) RunAndReturn(run func(context.Context, interface{}, ...*repository.QueryOptions) (PT, error)) *IUserRepository_FindByID_Call[PT] {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, options
func (_m *IUserRepository[PT]) GetAll(ctx context.Context, options ...*repository.QueryOptions) ([]PT, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []PT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*repository.QueryOptions) ([]PT, error)); ok {
		return rf(ctx, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*repository.QueryOptions) []PT); ok {
		r0 = rf(ctx, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PT)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*repository.QueryOptions) error); ok {
		r1 = rf(ctx, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type IUserRepository_GetAll_Call[PT interface{}] struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - options ...*repository.QueryOptions
func (_e *IUserRepository_Expecter[PT]) GetAll(ctx interface{}, options ...interface{}) *IUserRepository_GetAll_Call[PT] {
	return &IUserRepository_GetAll_Call[PT]{Call: _e.mock.On("GetAll",
		append([]interface{}{ctx}, options...)...)}
}

func (_c *IUserRepository_GetAll_Call[PT]) Run(run func(ctx context.Context, options ...*repository.QueryOptions)) *IUserRepository_GetAll_Call[PT] {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*repository.QueryOptions, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(*repository.QueryOptions)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *IUserRepository_GetAll_Call[PT]) Return(_a0 []PT, _a1 error) *IUserRepository_GetAll_Call[PT] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserRepository_GetAll_Call[PT]) RunAndReturn(run func(context.Context, ...*repository.QueryOptions) ([]PT, error)) *IUserRepository_GetAll_Call[PT] {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, user
func (_m *IUserRepository[PT]) Insert(ctx context.Context, user PT) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, PT) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IUserRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type IUserRepository_Insert_Call[PT interface{}] struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - user PT
func (_e *IUserRepository_Expecter[PT]) Insert(ctx interface{}, user interface{}) *IUserRepository_Insert_Call[PT] {
	return &IUserRepository_Insert_Call[PT]{Call: _e.mock.On("Insert", ctx, user)}
}

func (_c *IUserRepository_Insert_Call[PT]) Run(run func(ctx context.Context, user PT)) *IUserRepository_Insert_Call[PT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(PT))
	})
	return _c
}

func (_c *IUserRepository_Insert_Call[PT]) Return(_a0 error) *IUserRepository_Insert_Call[PT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserRepository_Insert_Call[PT]) RunAndReturn(run func(context.Context, PT) error) *IUserRepository_Insert_Call[PT] {
	_c.Call.Return(run)
	return _c
}

// InsertOrRecover provides a mock function with given fields: ctx, user
func (_m *IUserRepository[PT]) InsertOrRecover(ctx context.Context, user PT) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, PT) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IUserRepository_InsertOrRecover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOrRecover'
type IUserRepository_InsertOrRecover_Call[PT interface{}] struct {
	*mock.Call
}

// InsertOrRecover is a helper method to define mock.On call
//   - ctx context.Context
//   - user PT
func (_e *IUserRepository_Expecter[PT]) InsertOrRecover(ctx interface{}, user interface{}) *IUserRepository_InsertOrRecover_Call[PT] {
	return &IUserRepository_InsertOrRecover_Call[PT]{Call: _e.mock.On("InsertOrRecover", ctx, user)}
}

func (_c *IUserRepository_InsertOrRecover_Call[PT]) Run(run func(ctx context.Context, user PT)) *IUserRepository_InsertOrRecover_Call[PT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(PT))
	})
	return _c
}

func (_c *IUserRepository_InsertOrRecover_Call[PT]) Return(_a0 error) *IUserRepository_InsertOrRecover_Call[PT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserRepository_InsertOrRecover_Call[PT]) RunAndReturn(run func(context.Context, PT) error) *IUserRepository_InsertOrRecover_Call[PT] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, user
func (_m *IUserRepository[PT]) Update(ctx context.Context, user PT) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, PT) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IUserRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type IUserRepository_Update_Call[PT interface{}] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - user PT
func (_e *IUserRepository_Expecter[PT]) Update(ctx interface{}, user interface{}) *IUserRepository_Update_Call[PT] {
	return &IUserRepository_Update_Call[PT]{Call: _e.mock.On("Update", ctx, user)}
}

func (_c *IUserRepository_Update_Call[PT]) Run(run func(ctx context.Context, user PT)) *IUserRepository_Update_Call[PT] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(PT))
	})
	return _c
}

func (_c *IUserRepository_Update_Call[PT]) Return(_a0 error) *IUserRepository_Update_Call[PT] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserRepository_Update_Call[PT]) RunAndReturn(run func(context.Context, PT) error) *IUserRepository_Update_Call[PT] {
	_c.Call.Return(run)
	return _c
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository[PT interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository[PT] {
	mock := &IUserRepository[PT]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
