// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PasswordHasher is an autogenerated mock type for the PasswordHasher type
type PasswordHasher struct {
	mock.Mock
}

type PasswordHasher_Expecter struct {
	mock *mock.Mock
}

func (_m *PasswordHasher) EXPECT() *PasswordHasher_Expecter {
	return &PasswordHasher_Expecter{mock: &_m.Mock}
}

// HashAndSalt provides a mock function with given fields: password
func (_m *PasswordHasher) HashAndSalt(password string) (string, error) {
	ret := _m.Called(password)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordHasher_HashAndSalt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashAndSalt'
type PasswordHasher_HashAndSalt_Call struct {
	*mock.Call
}

// HashAndSalt is a helper method to define mock.On call
//   - password string
func (_e *PasswordHasher_Expecter) HashAndSalt(password interface{}) *PasswordHasher_HashAndSalt_Call {
	return &PasswordHasher_HashAndSalt_Call{Call: _e.mock.On("HashAndSalt", password)}
}

func (_c *PasswordHasher_HashAndSalt_Call) Run(run func(password string)) *PasswordHasher_HashAndSalt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PasswordHasher_HashAndSalt_Call) Return(_a0 string, _a1 error) *PasswordHasher_HashAndSalt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordHasher_HashAndSalt_Call) RunAndReturn(run func(string) (string, error)) *PasswordHasher_HashAndSalt_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyPassword provides a mock function with given fields: passwordHash, password
func (_m *PasswordHasher) VerifyPassword(passwordHash string, password string) error {
	ret := _m.Called(passwordHash, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(passwordHash, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordHasher_VerifyPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPassword'
type PasswordHasher_VerifyPassword_Call struct {
	*mock.Call
}

// VerifyPassword is a helper method to define mock.On call
//   - passwordHash string
//   - password string
func (_e *PasswordHasher_Expecter) VerifyPassword(passwordHash interface{}, password interface{}) *PasswordHasher_VerifyPassword_Call {
	return &PasswordHasher_VerifyPassword_Call{Call: _e.mock.On("VerifyPassword", passwordHash, password)}
}

func (_c *PasswordHasher_VerifyPassword_Call) Run(run func(passwordHash string, password string)) *PasswordHasher_VerifyPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *PasswordHasher_VerifyPassword_Call) Return(_a0 error) *PasswordHasher_VerifyPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordHasher_VerifyPassword_Call) RunAndReturn(run func(string, string) error) *PasswordHasher_VerifyPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewPasswordHasher creates a new instance of PasswordHasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordHasher(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordHasher {
	mock := &PasswordHasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
