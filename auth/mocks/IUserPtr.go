// Code generated by mockery v2.33.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// IUserPtr is an autogenerated mock type for the IUserPtr type
type IUserPtr[T interface{}] struct {
	mock.Mock
}

type IUserPtr_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *IUserPtr[T]) EXPECT() *IUserPtr_Expecter[T] {
	return &IUserPtr_Expecter[T]{mock: &_m.Mock}
}

// Active provides a mock function with given fields:
func (_m *IUserPtr[T]) Active() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IUserPtr_Active_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Active'
type IUserPtr_Active_Call[T interface{}] struct {
	*mock.Call
}

// Active is a helper method to define mock.On call
func (_e *IUserPtr_Expecter[T]) Active() *IUserPtr_Active_Call[T] {
	return &IUserPtr_Active_Call[T]{Call: _e.mock.On("Active")}
}

func (_c *IUserPtr_Active_Call[T]) Run(run func()) *IUserPtr_Active_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IUserPtr_Active_Call[T]) Return(_a0 error) *IUserPtr_Active_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserPtr_Active_Call[T]) RunAndReturn(run func() error) *IUserPtr_Active_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GenerateID provides a mock function with given fields:
func (_m *IUserPtr[T]) GenerateID() {
	_m.Called()
}

// IUserPtr_GenerateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateID'
type IUserPtr_GenerateID_Call[T interface{}] struct {
	*mock.Call
}

// GenerateID is a helper method to define mock.On call
func (_e *IUserPtr_Expecter[T]) GenerateID() *IUserPtr_GenerateID_Call[T] {
	return &IUserPtr_GenerateID_Call[T]{Call: _e.mock.On("GenerateID")}
}

func (_c *IUserPtr_GenerateID_Call[T]) Run(run func()) *IUserPtr_GenerateID_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IUserPtr_GenerateID_Call[T]) Return() *IUserPtr_GenerateID_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *IUserPtr_GenerateID_Call[T]) RunAndReturn(run func()) *IUserPtr_GenerateID_Call[T] {
	_c.Call.Return(run)
	return _c
}

// IsZeroID provides a mock function with given fields:
func (_m *IUserPtr[T]) IsZeroID() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IUserPtr_IsZeroID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsZeroID'
type IUserPtr_IsZeroID_Call[T interface{}] struct {
	*mock.Call
}

// IsZeroID is a helper method to define mock.On call
func (_e *IUserPtr_Expecter[T]) IsZeroID() *IUserPtr_IsZeroID_Call[T] {
	return &IUserPtr_IsZeroID_Call[T]{Call: _e.mock.On("IsZeroID")}
}

func (_c *IUserPtr_IsZeroID_Call[T]) Run(run func()) *IUserPtr_IsZeroID_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IUserPtr_IsZeroID_Call[T]) Return(_a0 bool) *IUserPtr_IsZeroID_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserPtr_IsZeroID_Call[T]) RunAndReturn(run func() bool) *IUserPtr_IsZeroID_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields:
func (_m *IUserPtr[T]) Login() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IUserPtr_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type IUserPtr_Login_Call[T interface{}] struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
func (_e *IUserPtr_Expecter[T]) Login() *IUserPtr_Login_Call[T] {
	return &IUserPtr_Login_Call[T]{Call: _e.mock.On("Login")}
}

func (_c *IUserPtr_Login_Call[T]) Run(run func()) *IUserPtr_Login_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IUserPtr_Login_Call[T]) Return(_a0 string) *IUserPtr_Login_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserPtr_Login_Call[T]) RunAndReturn(run func() string) *IUserPtr_Login_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Password provides a mock function with given fields:
func (_m *IUserPtr[T]) Password() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IUserPtr_Password_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Password'
type IUserPtr_Password_Call[T interface{}] struct {
	*mock.Call
}

// Password is a helper method to define mock.On call
func (_e *IUserPtr_Expecter[T]) Password() *IUserPtr_Password_Call[T] {
	return &IUserPtr_Password_Call[T]{Call: _e.mock.On("Password")}
}

func (_c *IUserPtr_Password_Call[T]) Run(run func()) *IUserPtr_Password_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IUserPtr_Password_Call[T]) Return(_a0 string) *IUserPtr_Password_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserPtr_Password_Call[T]) RunAndReturn(run func() string) *IUserPtr_Password_Call[T] {
	_c.Call.Return(run)
	return _c
}

// RawID provides a mock function with given fields:
func (_m *IUserPtr[T]) RawID() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// IUserPtr_RawID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RawID'
type IUserPtr_RawID_Call[T interface{}] struct {
	*mock.Call
}

// RawID is a helper method to define mock.On call
func (_e *IUserPtr_Expecter[T]) RawID() *IUserPtr_RawID_Call[T] {
	return &IUserPtr_RawID_Call[T]{Call: _e.mock.On("RawID")}
}

func (_c *IUserPtr_RawID_Call[T]) Run(run func()) *IUserPtr_RawID_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IUserPtr_RawID_Call[T]) Return(_a0 interface{}) *IUserPtr_RawID_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserPtr_RawID_Call[T]) RunAndReturn(run func() interface{}) *IUserPtr_RawID_Call[T] {
	_c.Call.Return(run)
	return _c
}

// SetIDFromString provides a mock function with given fields: _a0
func (_m *IUserPtr[T]) SetIDFromString(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IUserPtr_SetIDFromString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetIDFromString'
type IUserPtr_SetIDFromString_Call[T interface{}] struct {
	*mock.Call
}

// SetIDFromString is a helper method to define mock.On call
//   - _a0 string
func (_e *IUserPtr_Expecter[T]) SetIDFromString(_a0 interface{}) *IUserPtr_SetIDFromString_Call[T] {
	return &IUserPtr_SetIDFromString_Call[T]{Call: _e.mock.On("SetIDFromString", _a0)}
}

func (_c *IUserPtr_SetIDFromString_Call[T]) Run(run func(_a0 string)) *IUserPtr_SetIDFromString_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IUserPtr_SetIDFromString_Call[T]) Return(_a0 error) *IUserPtr_SetIDFromString_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserPtr_SetIDFromString_Call[T]) RunAndReturn(run func(string) error) *IUserPtr_SetIDFromString_Call[T] {
	_c.Call.Return(run)
	return _c
}

// SetPassword provides a mock function with given fields: _a0
func (_m *IUserPtr[T]) SetPassword(_a0 string) {
	_m.Called(_a0)
}

// IUserPtr_SetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPassword'
type IUserPtr_SetPassword_Call[T interface{}] struct {
	*mock.Call
}

// SetPassword is a helper method to define mock.On call
//   - _a0 string
func (_e *IUserPtr_Expecter[T]) SetPassword(_a0 interface{}) *IUserPtr_SetPassword_Call[T] {
	return &IUserPtr_SetPassword_Call[T]{Call: _e.mock.On("SetPassword", _a0)}
}

func (_c *IUserPtr_SetPassword_Call[T]) Run(run func(_a0 string)) *IUserPtr_SetPassword_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IUserPtr_SetPassword_Call[T]) Return() *IUserPtr_SetPassword_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *IUserPtr_SetPassword_Call[T]) RunAndReturn(run func(string)) *IUserPtr_SetPassword_Call[T] {
	_c.Call.Return(run)
	return _c
}

// StringID provides a mock function with given fields:
func (_m *IUserPtr[T]) StringID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IUserPtr_StringID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StringID'
type IUserPtr_StringID_Call[T interface{}] struct {
	*mock.Call
}

// StringID is a helper method to define mock.On call
func (_e *IUserPtr_Expecter[T]) StringID() *IUserPtr_StringID_Call[T] {
	return &IUserPtr_StringID_Call[T]{Call: _e.mock.On("StringID")}
}

func (_c *IUserPtr_StringID_Call[T]) Run(run func()) *IUserPtr_StringID_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IUserPtr_StringID_Call[T]) Return(_a0 string) *IUserPtr_StringID_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserPtr_StringID_Call[T]) RunAndReturn(run func() string) *IUserPtr_StringID_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewIUserPtr creates a new instance of IUserPtr. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserPtr[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserPtr[T] {
	mock := &IUserPtr[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
