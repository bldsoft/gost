// Code generated by "enumer -gqlgen -type SortOrder --trimprefix SortOrder --output sort_order_enum.go"; DO NOT EDIT.

package repository

import (
	"fmt"
	"io"
	"strconv"
	"strings"
)

const _SortOrderName = "ASCDESC"

var _SortOrderIndex = [...]uint8{0, 3, 7}

const _SortOrderLowerName = "ascdesc"

func (i SortOrder) String() string {
	if i < 0 || i >= SortOrder(len(_SortOrderIndex)-1) {
		return fmt.Sprintf("SortOrder(%d)", i)
	}
	return _SortOrderName[_SortOrderIndex[i]:_SortOrderIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SortOrderNoOp() {
	var x [1]struct{}
	_ = x[SortOrderASC-(0)]
	_ = x[SortOrderDESC-(1)]
}

var _SortOrderValues = []SortOrder{SortOrderASC, SortOrderDESC}

var _SortOrderNameToValueMap = map[string]SortOrder{
	_SortOrderName[0:3]:      SortOrderASC,
	_SortOrderLowerName[0:3]: SortOrderASC,
	_SortOrderName[3:7]:      SortOrderDESC,
	_SortOrderLowerName[3:7]: SortOrderDESC,
}

var _SortOrderNames = []string{
	_SortOrderName[0:3],
	_SortOrderName[3:7],
}

// SortOrderString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SortOrderString(s string) (SortOrder, error) {
	if val, ok := _SortOrderNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SortOrderNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SortOrder values", s)
}

// SortOrderValues returns all values of the enum
func SortOrderValues() []SortOrder {
	return _SortOrderValues
}

// SortOrderStrings returns a slice of all String values of the enum
func SortOrderStrings() []string {
	strs := make([]string, len(_SortOrderNames))
	copy(strs, _SortOrderNames)
	return strs
}

// IsASortOrder returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SortOrder) IsASortOrder() bool {
	for _, v := range _SortOrderValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalGQL implements the graphql.Marshaler interface for SortOrder
func (i SortOrder) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(i.String()))
}

// UnmarshalGQL implements the graphql.Unmarshaler interface for SortOrder
func (i *SortOrder) UnmarshalGQL(value interface{}) error {
	str, ok := value.(string)
	if !ok {
		return fmt.Errorf("SortOrder should be a string, got %T", value)
	}

	var err error
	*i, err = SortOrderString(str)
	return err
}
